오류
Uncaught TypeError: marked is not a function
컨텍스트
sidepanel.html
스택 추적
sidepanel.js:79 (익명의 함수)
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
const listView = document.getElementById('list-view');
const editorView = document.getElementById('editor-view');
const noteList = document.getElementById('note-list');
const newNoteButton = document.getElementById('new-note-button');
const backButton = document.getElementById('back-button');
const deleteNoteButton = document.getElementById('delete-note-button');
const editorTitle = document.getElementById('editor-title');
const markdownEditor = document.getElementById('markdown-editor');
const htmlPreview = document.getElementById('html-preview');
const toggleViewButton = document.getElementById('toggle-view-button');

let notes = [];
let activeNoteId = null;
let isPreview = false;

// Load notes from storage
chrome.storage.local.get('notes', (data) => {
  const loadedNotes = data.notes;

  if (!loadedNotes) {
    notes = [];
  } else if (typeof loadedNotes === 'string') {
    const content = loadedNotes;
    const title = content.trim().split('\n')[0].substring(0, 30) || 'Imported Note';
    notes = [{
      id: `migrated-${Date.now()}`,
      title: title,
      content: content
    }];
    saveNotes();
  } else if (Array.isArray(loadedNotes)) {
    notes = loadedNotes;
  } else {
    notes = [];
  }
  renderNoteList();
});

function saveNotes() {
  chrome.storage.local.set({ notes });
}

function renderNoteList() {
  noteList.innerHTML = '';
  if (!Array.isArray(notes)) return;
  notes.forEach(note => {
    const li = document.createElement('li');
    li.textContent = note.title;
    li.dataset.noteId = note.id;
    li.addEventListener('click', () => openNote(note.id));
    noteList.appendChild(li);
  });
}

function openNote(noteId) {
  const note = notes.find(n => n.id === noteId);
  if (note) {
    activeNoteId = noteId;
    editorTitle.textContent = note.title;
    markdownEditor.value = note.content;
    renderMarkdown();
    showEditorView();
  }
}

function showListView() {
  activeNoteId = null;
  listView.style.display = 'block';
  editorView.style.display = 'none';
  renderNoteList();
}

function showEditorView() {
  listView.style.display = 'none';
  editorView.style.display = 'block';
}

function renderMarkdown() {
  htmlPreview.innerHTML = marked(markdownEditor.value);
}

newNoteButton.addEventListener('click', () => {
  const newNote = {
    id: Date.now().toString(),
    title: 'New Note',
    content: ''
  };
  notes.unshift(newNote);
  saveNotes();
  openNote(newNote.id);
});

backButton.addEventListener('click', () => {
  const note = notes.find(n => n.id === activeNoteId);
  if (note) {
    note.content = markdownEditor.value;
    const firstLine = note.content.trim().split('\n')[0].substring(0, 30);
    note.title = firstLine || 'New Note';
    saveNotes();
  }
  showListView();
});

deleteNoteButton.addEventListener('click', () => {
  notes = notes.filter(n => n.id !== activeNoteId);
  saveNotes();
  showListView();
});

markdownEditor.addEventListener('input', () => {
  const note = notes.find(n => n.id === activeNoteId);
  if (note) {
    note.content = markdownEditor.value;
    const firstLine = note.content.trim().split('\n')[0].substring(0, 30);
    note.title = firstLine || 'New Note';
    saveNotes();
    renderMarkdown();
    const noteListItem = noteList.querySelector(`[data-note-id="${activeNoteId}"]`);
    if (noteListItem) {
      noteListItem.textContent = note.title;
    }
  }
});

toggleViewButton.addEventListener('click', () => {
  isPreview = !isPreview;
  if (isPreview) {
    htmlPreview.style.display = 'block';
    markdownEditor.style.display = 'none';
    toggleViewButton.textContent = 'Edit';
  } else {
    htmlPreview.style.display = 'none';
    markdownEditor.style.display = 'block';
    toggleViewButton.textContent = 'Preview';
  }
});

showListView();
 